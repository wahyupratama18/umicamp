{"version":3,"sources":["components/MenuNavigation.tsx","components/Navigation.tsx","components/forms/InputUploadMedia.tsx","components/forms/InputSubmit.tsx","components/forms/InputPhone.tsx","components/application-form/PersonalDetails.tsx","components/forms/InputTextField.tsx","components/forms/InputRadioGroup.tsx","components/forms/InputAutoCompleteForCountry.tsx","components/application-form/EducationBackground.tsx","components/forms/InputCheckboxGroup.tsx","components/application-form/HealthCondition.tsx","components/application-form/PersonalStatement.tsx","components/application-form/EmergencyContact.tsx","constants/api.ts","components/application-form/ApplicantMedia.tsx","components/application-form/ApplicationFormConfirm.tsx","scenes/ApplicationForm.tsx"],"names":["useStyles","makeStyles","createStyles","resetLinkStyleApppBar","textDecoration","color","resetLinkStyleMenu","MenuNavigation","classes","React","useState","anchorEl","setAnchorEl","firebaseApp","useContext","FirebaseContext","userStore","UserStoreContext","history","useHistory","localStorage","getItem","emailUser","handleClose","signOutHandler","a","doSignOut","res","hasError","clear","push","SIGN_IN","Typography","variant","style","cursor","IconButton","aria-owns","Boolean","undefined","aria-haspopup","onClick","event","currentTarget","Icon","Menu","id","anchorOrigin","vertical","horizontal","transformOrigin","open","onClose","className","to","SETTINGS","MenuItem","Divider","theme","grow","flexGrow","resetLinkStyle","resetLinkStyleInMenu","root","display","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","width","enteringScreen","menuButton","marginRight","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","spacing","breakpoints","up","toolbar","alignItems","justifyContent","padding","mixins","content","nested","paddingLeft","listItemIcon","minWidth","Navigation","useTheme","openNavigation","setOpenNavigation","openMenuReg","setOpenMenuReg","handleDrawerOpen","setItem","handleDrawerClose","handleClickMenuReg","openPage","pageRoute","useObserver","CssBaseline","AppBar","position","clsx","Toolbar","aria-label","edge","alt","src","height","Drawer","paper","ListItem","button","ListItemIcon","direction","ListItemText","primary","primaryTypographyProps","List","Tooltip","disableHoverListener","title","HOME","Collapse","in","timeout","unmountOnExit","component","disablePadding","APPLICATION_FORM","configApplicationForm","isSubmitted","applicationFormIsValid","AcceptedFileTypes","ExampleTypeOptions","InputSubmit","label","disabled","Button","type","fullWidth","InputPhone","value","onChange","required","labels","marginTop","marginBottom","fontSize","lineHeight","letterSpacing","textAlign","error","isValidPhoneNumber","option","filter","createFilterOptions","PersonalDetails","loading","setLoading","fullName","setFullName","nickName","setNickName","address","setAddress","city","setCity","province","setProvince","country","setCountry","postcode","setPostcode","phone","setPhone","mobilePhone","setMobilePhone","waNumber","setWaNumber","facebook","setFacebook","instagram","setInstagram","socialMedia","setSocialMedia","tShirtSize","setTShirtSize","dateOfBirth","setDateOfBirth","sex","setSex","maritalStatus","setMaritalStatus","religion","setReligion","passportNumber","setPassportNumber","expiryDate","setExpiryDate","nationality","setNationality","useEffect","personalDetails","countries","size","onSubmitHandler","e","preventDefault","form","reportValidity","toast","info","updatePersonalDetails","message","success","Grid","item","gutterBottom","onSubmit","noValidate","TextField","margin","name","autoComplete","multiline","Autocomplete","options","v","countryToICountryType","autoHighlight","disableClearable","getOptionLabel","renderOption","Fragment","countryToFlag","code","renderInput","params","inputProps","newValue","inputValue","filterOptions","filtered","tShirtOptions","freeSolo","toISOString","split","Date","InputLabelProps","shrink","FormControl","FormLabel","RadioGroup","FormControlLabel","control","Radio","InputTextField","helperText","rows","rowsMax","InputRadioGroup","map","data","key","cuid","InputAutoCompleteForCountry","EducationBackground","latestDegree","setLatestDegree","homeUniversity","setHomeUniversity","faculty","setFaculty","department","setDepartment","educationBackground","degreeOptions","updateEducationBackground","formControl","InputCheckboxGroup","values","check","state","setState","length","forEach","val","FormGroup","Checkbox","checked","selectedData","HealthCondition","dietaryRestriction","setDietaryRestriction","dietaryDetail","setDietaryDetail","disability","setDisability","disabilityDetail","setDisabilityDetail","medicalCondition","setMedicalCondition","specialRequirements","setSpecialRequirements","healthCondition","disabilityOptions","updateHealthCondition","dietaryRestrictionOptions","PersonalStatement","informationSources","setInformationSources","motivation","setMotivation","additionalInformationSources","setAdditionalInformationSources","personalExperiences","setPersonalExperiences","specialitiesDescribe","setSpecialitiesDescribe","afterProgram","setAfterProgram","othersIsChecked","setOthersIsChecked","isValueError","showToast","messageToast","personalStatement","updatePersonalStatement","includes","informationSourceOptions","EmergencyContactDetail","relationship","setRelationship","email","setEmail","emergencyContact","updateEmergencyContact","hostname","window","location","HOST_NAME","API","media","InputType","InputUploadMedia","onSubmitted","fileName","filesLimit","acceptedFileType","IMAGE","dialogTitle","subHeader","showExampleButton","exampleType","LOCAL_IMAGE","exampleData","setOpen","openDialog","setOpenDialog","dialogClear","setDialogClear","fileUrl","setFileUrl","exampleImageLocal","setExampleImageLocal","onSaveHandler","files","uid","toString","formData","FormData","append","axios","post","headers","_boundary","url","Error","console","log","maxWidth","Card","CardHeader","subheader","PDF","CardMedia","image","CardActions","LINK","ASSETS_IMAGE","onSave","acceptedFiles","showPreviews","maxFileSize","Dialog","keepMounted","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","ApplicantMedia","passportPhoto","setPassportPhoto","passportScan","setPassportScan","medicalCertificate","setMedicalCertificate","declarationLetter","setDeclarationLetter","applicantMedia","onSubmittedMedia","inputType","updateApplicantMedia","ApplicationFormConfirm","handleOpen","handleCancel","handleOk","configData","updateConfigApplicationForm","responseStatus","messageFromAdmin","messageToAdmin","dateMessageFromAdmin","dateMessageToAdmin","CardContent","DialogActions","autoFocus","TabPanel","props","children","index","other","role","hidden","Box","p","a11yProps","tabs","borderRight","palette","divider","paddingTop","paddingRight","paddingBottom","ApplicationForm","setValue","handleChange","colorTileItem","container","xs","sm","Tabs","orientation","indicatorColor","textColor","Tab","icon","personalDetailsIsValid","educationBackgroundIsValid","healthConditionIsValid","personalStatementIsValid","emergencyContactIsValid","applicantMediaIsValid","href","target","rel"],"mappings":"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","file":"static/js/10.a5e53519.chunk.js","sourcesContent":["import React, {useContext, useState} from 'react';\r\nimport {createStyles, Divider, Icon, IconButton, makeStyles, Menu, MenuItem, Typography} from '@material-ui/core';\r\nimport {NavLink, useHistory} from 'react-router-dom';\r\nimport {SETTINGS, SIGN_IN} from \"../constants\";\r\nimport {FirebaseContext} from \"../firebase\";\r\nimport {UserStoreContext} from \"../providers/UserProvider\";\r\n\r\nconst useStyles = makeStyles(() => createStyles({\r\n    resetLinkStyleApppBar: {\r\n        textDecoration: 'none',\r\n        color: 'white'\r\n    },\r\n    resetLinkStyleMenu: {\r\n        textDecoration: 'none',\r\n        color: 'black'\r\n    }\r\n}));\r\n\r\nexport default function MenuNavigation() {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\r\n    const firebaseApp = useContext(FirebaseContext);\r\n    const userStore = useContext(UserStoreContext);\r\n    const history = useHistory();\r\n    const [emailUser] = useState<string>(localStorage.getItem('email') ?? '');\r\n\r\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const signOutHandler = async () => {\r\n        setAnchorEl(null);\r\n\r\n        const res = await firebaseApp?.doSignOut();\r\n        if (!res?.hasError()) {\r\n            userStore?.clear();\r\n            history.push(SIGN_IN);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Typography variant={\"subtitle2\"} style={{cursor: 'default'}}>\r\n                {emailUser}\r\n            </Typography>\r\n            <IconButton\r\n                aria-owns={Boolean(anchorEl) ? \"menu-appbar\" : undefined}\r\n                aria-haspopup=\"true\"\r\n                color=\"inherit\"\r\n                onClick={handleClick}\r\n            >\r\n                <Icon>account_circle</Icon>\r\n            </IconButton>\r\n\r\n            <Menu\r\n                id=\"menu-appbar\"\r\n                anchorEl={anchorEl}\r\n                anchorOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\"\r\n                }}\r\n                transformOrigin={{\r\n                    vertical: \"top\",\r\n                    horizontal: \"right\",\r\n                }}\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <NavLink className={classes.resetLinkStyleMenu} to={SETTINGS}>\r\n                    <MenuItem onClick={handleClose}>\r\n                        Settings\r\n                    </MenuItem>\r\n                </NavLink>\r\n                <Divider/>\r\n                <MenuItem onClick={signOutHandler}>\r\n                    Sign Out\r\n                </MenuItem>\r\n            </Menu>\r\n        </>\r\n    );\r\n}","import React, {useContext} from 'react';\r\nimport clsx from 'clsx';\r\nimport {\r\n    AppBar,\r\n    Collapse,\r\n    createStyles,\r\n    CssBaseline,\r\n    Divider,\r\n    Drawer,\r\n    Icon,\r\n    IconButton,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    makeStyles,\r\n    Theme,\r\n    Toolbar,\r\n    Tooltip,\r\n    Typography,\r\n    useTheme,\r\n} from '@material-ui/core';\r\nimport {useHistory} from 'react-router-dom';\r\nimport MenuNavigation from \"./MenuNavigation\";\r\nimport {useObserver} from 'mobx-react';\r\nimport {APPLICATION_FORM, HOME} from \"../constants\";\r\nimport {UserStoreContext} from \"../providers/UserProvider\";\r\n\r\nconst drawerWidth = 275;\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    grow: {\r\n        flexGrow: 1\r\n    },\r\n    resetLinkStyle: {\r\n        textDecoration: 'none',\r\n        color: 'white'\r\n    },\r\n    resetLinkStyleInMenu: {\r\n        textDecoration: 'none',\r\n        color: 'black'\r\n    },\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        marginLeft: drawerWidth,\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        transition: theme.transitions.create(['width', 'margin'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: 'hidden',\r\n        width: theme.spacing(7) + 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9) + 1,\r\n        },\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: theme.spacing(3),\r\n    },\r\n    nested: {\r\n        paddingLeft: theme.spacing(3),\r\n    },\r\n    listItemIcon: {\r\n        minWidth: '47px',\r\n    }\r\n}));\r\n\r\nexport default function Navigation() {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const userStore = useContext(UserStoreContext);\r\n\r\n    const theme = useTheme();\r\n    const [openNavigation, setOpenNavigation] = React.useState(localStorage.getItem('openNavigation') === 'open' ? true : false);\r\n    const [openMenuReg, setOpenMenuReg] = React.useState(true);\r\n\r\n    const handleDrawerOpen = () => {\r\n        setOpenNavigation(true);\r\n        localStorage.setItem('openNavigation', 'open');\r\n\r\n        setOpenMenuReg(true);\r\n    };\r\n\r\n    const handleDrawerClose = () => {\r\n        setOpenNavigation(false);\r\n        localStorage.setItem('openNavigation', 'close');\r\n\r\n        setOpenMenuReg(false);\r\n    };\r\n\r\n    const handleClickMenuReg = () => {\r\n        setOpenMenuReg(!openMenuReg);\r\n    };\r\n\r\n    const openPage = (pageRoute: string) => {\r\n        history.push(pageRoute);\r\n    };\r\n\r\n    return useObserver(() => (\r\n        <div className={classes.root}>\r\n            <CssBaseline/>\r\n            <AppBar\r\n                position=\"fixed\"\r\n                className={clsx(classes.appBar, {\r\n                    [classes.appBarShift]: openNavigation,\r\n                })}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton\r\n                        color=\"inherit\"\r\n                        aria-label=\"open drawer\"\r\n                        onClick={handleDrawerOpen}\r\n                        edge=\"start\"\r\n                        className={clsx(classes.menuButton, {\r\n                            [classes.hide]: openNavigation,\r\n                        })}\r\n                    >\r\n                        <Icon>menu</Icon>\r\n                    </IconButton>\r\n\r\n                    <Typography variant=\"subtitle1\">\r\n                        <img alt={'UM iCamp 2020 logo navigation'} src={'./apply/assets/images/um-icamp-2020-glow.png'}\r\n                             height={45}/>\r\n                        &nbsp;&nbsp;\r\n                    </Typography>\r\n                    <Typography className={classes.grow} color=\"inherit\" variant=\"h6\">\r\n                        <span onClick={handleDrawerOpen} style={{cursor: \"pointer\"}}>\r\n                            {openNavigation ? ' ' : 'UM iCamp 2020'}\r\n                        </span>\r\n                    </Typography>\r\n                    <MenuNavigation/>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Drawer\r\n                variant=\"permanent\"\r\n                className={clsx(classes.drawer, {\r\n                    [classes.drawerOpen]: openNavigation,\r\n                    [classes.drawerClose]: !openNavigation,\r\n                })}\r\n                classes={{\r\n                    paper: clsx({\r\n                        [classes.drawerOpen]: openNavigation,\r\n                        [classes.drawerClose]: !openNavigation,\r\n                    }),\r\n                }}\r\n            >\r\n                <div style={{height: '64px', display: \"flex\"}}>\r\n                    <ListItem button onClick={handleDrawerClose}>\r\n                        <ListItemIcon>\r\n                            {theme.direction === 'rtl' ? <Icon>chevron_right</Icon> : <Icon>chevron_left</Icon>}\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"UM iCamp 2020\" primaryTypographyProps={{variant: \"h6\"}}/>\r\n                    </ListItem>\r\n                </div>\r\n                <Divider/>\r\n                <List>\r\n                    <Tooltip disableHoverListener={openNavigation} title=\"Dashboard\" aria-label=\"dashboard\">\r\n                        <ListItem button onClick={() => openPage(HOME)}>\r\n                            <ListItemIcon><Icon>dashboard</Icon></ListItemIcon>\r\n                            <ListItemText primary={\"Dashboard\"}/>\r\n                        </ListItem>\r\n                    </Tooltip>\r\n                </List>\r\n                <Divider/>\r\n                <Tooltip disableHoverListener={openNavigation} title=\"Submission\" aria-label=\"submission\">\r\n                    <ListItem button onClick={handleClickMenuReg}>\r\n                        <ListItemIcon>\r\n                            <Icon>post_add</Icon>\r\n                        </ListItemIcon>\r\n                        <ListItemText primary=\"Submission\"/>\r\n                        {openMenuReg ? <Icon>expand_less</Icon> : <Icon>expand_more</Icon>}\r\n                    </ListItem>\r\n                </Tooltip>\r\n                <Collapse in={openMenuReg} timeout=\"auto\" unmountOnExit>\r\n                    <List component=\"div\" disablePadding>\r\n                        <Tooltip disableHoverListener={openNavigation} title=\"1. Application Form\"\r\n                                 aria-label=\"application-form\">\r\n                            <ListItem button className={classes.nested} onClick={() => openPage(APPLICATION_FORM)}>\r\n                                <ListItemIcon className={classes.listItemIcon}>\r\n                                    <Icon\r\n                                        color={(userStore?.configApplicationForm.isSubmitted ?? false) ? \"primary\" : 'inherit'}>\r\n                                        {userStore?.applicationFormIsValid ? \"check_circle\" : \"edit\"}\r\n                                    </Icon>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary=\"Application Form\"/>\r\n                            </ListItem>\r\n                        </Tooltip>\r\n                        {/*<Tooltip disableHoverListener={openNavigation} title=\"2. Letter of Commitment\"*/}\r\n                        {/*         aria-label=\"letter-of-commitment\">*/}\r\n                        {/*    <ListItem button disabled className={classes.nested}>*/}\r\n                        {/*        <ListItemIcon className={classes.listItemIcon}>*/}\r\n                        {/*            <Icon>lock</Icon>*/}\r\n                        {/*        </ListItemIcon>*/}\r\n                        {/*        <ListItemText primary=\"2. Letter of Commitment\"/>*/}\r\n                        {/*    </ListItem>*/}\r\n                        {/*</Tooltip>*/}\r\n                        {/*<Tooltip disableHoverListener={openNavigation} title=\"3. Travel Documents\"*/}\r\n                        {/*         aria-label=\"travel-documents\">*/}\r\n                        {/*    <ListItem button disabled className={classes.nested}>*/}\r\n                        {/*        <ListItemIcon className={classes.listItemIcon}>*/}\r\n                        {/*            <Icon>lock</Icon>*/}\r\n                        {/*        </ListItemIcon>*/}\r\n                        {/*        <ListItemText primary=\"3. Travel Documents\"/>*/}\r\n                        {/*    </ListItem>*/}\r\n                        {/*</Tooltip>*/}\r\n                    </List>\r\n                </Collapse>\r\n                <Divider/>\r\n            </Drawer>\r\n        </div>\r\n    ));\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {DropzoneDialog} from \"material-ui-dropzone/dist\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardHeader,\r\n    CardMedia,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Divider,\r\n} from \"@material-ui/core\";\r\nimport LoadingBackground from \"../LoadingBackdrop\";\r\nimport axios from 'axios';\r\nimport {API, FOR_UPLOAD_MEDIA, HOST_NAME} from \"../../constants/api\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {toast} from \"react-toastify\";\r\nimport cuid from \"cuid\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        marginTop: '30px',\r\n        marginBottom: '10px',\r\n    },\r\n    media: {\r\n        height: 300,\r\n    },\r\n});\r\n\r\nexport enum AcceptedFileTypes {\r\n    PDF = '.pdf',\r\n    PNG = 'image/png',\r\n    JPG = 'image/jpeg',\r\n    IMAGE = 'image/*',\r\n}\r\n\r\nexport enum ExampleTypeOptions {\r\n    LINK,\r\n    LOCAL_IMAGE,\r\n    ASSETS_IMAGE,\r\n}\r\n\r\ninterface IInputUploadMedia {\r\n    onSubmitted?: (message: string, response?: string, error?: boolean) => void,\r\n    fileName: string,\r\n    filesLimit?: number;\r\n    acceptedFileType?: AcceptedFileTypes,\r\n    dialogTitle?: string,\r\n    subHeader?: string,\r\n    value?: string,\r\n    showExampleButton?: boolean,\r\n    exampleType?: ExampleTypeOptions,\r\n    exampleData?: string,\r\n    disabled?:boolean,\r\n}\r\n\r\nconst InputUploadMedia: React.FC<IInputUploadMedia> = ({\r\n                                                           onSubmitted,\r\n                                                           fileName,\r\n                                                           filesLimit = 1,\r\n                                                           acceptedFileType = AcceptedFileTypes.IMAGE,\r\n                                                           dialogTitle = \"Dialog Title\",\r\n                                                           subHeader,\r\n                                                           value,\r\n                                                           showExampleButton = false,\r\n                                                           exampleType = ExampleTypeOptions.LOCAL_IMAGE,\r\n                                                           exampleData,\r\n                                                           disabled,\r\n}) => {\r\n    const [open, setOpen] = useState<boolean>(false);\r\n    const [openDialog, setOpenDialog] = useState<boolean>(false);\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [dialogClear, setDialogClear] = useState<boolean>(false);\r\n    const [fileUrl, setFileUrl] = useState<string>('./apply/assets/images/white-background.png');\r\n    const [exampleImageLocal, setExampleImageLocal] = useState<string>('./apply/assets/images/white-background.png');\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        setFileUrl(value ? `${HOST_NAME}${value}` : fileUrl);\r\n    }, [value, fileUrl]);\r\n\r\n    const onSaveHandler = async (files: any[]) => {\r\n        if (files.length === 0) {\r\n            toast.info('Please select or drag and drop your file.');\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n        setDialogClear(true);\r\n        setLoading(true);\r\n\r\n        const uid = localStorage.getItem('uid')?.toString();\r\n\r\n        let formData = new FormData();\r\n        formData.append('data', files[0]);\r\n        formData.append('uid', uid ?? 'null');\r\n        formData.append('file-name', fileName);\r\n        formData.append('file-type', acceptedFileType.toString());\r\n\r\n        try {\r\n            const res = await axios.post(API + FOR_UPLOAD_MEDIA, formData, {\r\n                headers: {'Content-Type': `multipart/form-data; boundary=${files[0]._boundary}`},\r\n            });\r\n\r\n            if (res.data.url)\r\n                toast.success(\"Success uploading file.\");\r\n            else\r\n                throw new Error('Fail uploading file.');\r\n\r\n            if (onSubmitted) onSubmitted(res.data.message ?? null, `${res.data.url}?${cuid()}`, res.data.error);\r\n\r\n        } catch (e) {\r\n            console.log(e);\r\n            toast.error(\"Fail uploading file.\");\r\n        }\r\n\r\n        setLoading(false);\r\n\r\n        setDialogClear(false);\r\n    };\r\n\r\n    const onCloseHandler = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const onOpenHandle = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const openFileHandler = () => {\r\n        window.open(fileUrl);\r\n    };\r\n\r\n\r\n    const handleClickOpenDialog = () => {\r\n        switch (exampleType) {\r\n            case ExampleTypeOptions.LINK:\r\n                window.open(exampleData);\r\n                break;\r\n            case ExampleTypeOptions.LOCAL_IMAGE:\r\n                setExampleImageLocal('./apply/assets/images/white-background.png');\r\n                setOpenDialog(true);\r\n                break;\r\n            case ExampleTypeOptions.ASSETS_IMAGE:\r\n                setExampleImageLocal(`${exampleData}`);\r\n                setOpenDialog(true);\r\n                break;\r\n        }\r\n    };\r\n\r\n    const handleCloseDialog = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n\r\n    return (<>\r\n        <LoadingBackground open={loading}/>\r\n\r\n        <div style={{\r\n            maxWidth: '80%',\r\n            margin: \"auto\",\r\n        }}>\r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    title={dialogTitle}\r\n                    subheader={subHeader}\r\n                />\r\n                <Divider/>\r\n                {\r\n                    acceptedFileType === AcceptedFileTypes.PDF ? <></> :\r\n                        <CardMedia\r\n                            className={classes.media}\r\n                            image={fileUrl}\r\n                            title=\"Contemplative Reptile\"\r\n                        />\r\n                }\r\n                <Divider/>\r\n                <CardActions>\r\n                    <Button\r\n                            disabled={disabled}\r\n                            size=\"small\"\r\n                            color=\"primary\"\r\n                            variant={value ? 'contained' : 'outlined'}\r\n                            onClick={onOpenHandle}\r\n                    >\r\n                        {value ? 'Update' : 'Select'} File\r\n                    </Button>\r\n                    <Button disabled={!value} size=\"small\" color=\"secondary\" onClick={openFileHandler}>\r\n                        Open\r\n                    </Button>\r\n                    {\r\n                        showExampleButton ?\r\n                            <Button size=\"small\" color=\"secondary\" onClick={handleClickOpenDialog}>\r\n                                Example\r\n                            </Button> : <></>\r\n                    }\r\n                </CardActions>\r\n            </Card>\r\n        </div>\r\n        {\r\n            dialogClear ?\r\n                <></> :\r\n                <DropzoneDialog\r\n                    open={open}\r\n                    onSave={onSaveHandler}\r\n                    acceptedFiles={[acceptedFileType.toString()]}\r\n                    showPreviews={true}\r\n                    maxFileSize={1000000}\r\n                    filesLimit={filesLimit}\r\n                    onClose={onCloseHandler}\r\n                    dialogTitle={dialogTitle}\r\n                />\r\n        }\r\n        <Dialog\r\n            open={openDialog}\r\n            keepMounted\r\n            onClose={handleCloseDialog}\r\n            aria-labelledby=\"example-dialog-title\"\r\n            aria-describedby=\"example-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"example-dialog-title\">{dialogTitle}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"example-dialog-description\">\r\n                    <img\r\n                        alt={'Assets Example local'}\r\n                        src={exampleImageLocal}/>\r\n                </DialogContentText>\r\n            </DialogContent>\r\n        </Dialog>\r\n    </>);\r\n};\r\n\r\nexport default InputUploadMedia;","import React, {MouseEventHandler} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\ninterface IInputSubmit {\r\n    label?: string,\r\n    onClick?: MouseEventHandler<any>;\r\n    disabled?: boolean;\r\n}\r\n\r\nconst InputSubmit: React.FC<IInputSubmit> = ({\r\n                                                 label = \"Submit\",\r\n                                                 onClick,\r\n                                                 disabled,\r\n                                             }) => {\r\n\r\n    return (<>\r\n        <br/>\r\n        <br/>\r\n        <Button\r\n            disabled={disabled}\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={onClick}\r\n        >\r\n            {label}\r\n        </Button>\r\n    </>);\r\n};\r\n\r\nexport default InputSubmit;","import React from 'react';\r\nimport PhoneInput, {isValidPhoneNumber} from \"react-phone-number-input\";\r\nimport 'react-phone-number-input/style.css'\r\n\r\ninterface IInputPhone {\r\n    value: string;\r\n    required?: boolean;\r\n    onChange: (value: string) => void;\r\n    labels?: string;\r\n}\r\n\r\nconst InputPhone: React.FC<IInputPhone> = ({\r\n                                               value,\r\n                                               onChange,\r\n                                               required,\r\n                                               labels\r\n                                           }) => {\r\n    return (\r\n        <div>\r\n            <div\r\n                style={{\r\n                    color: '#0000008a',\r\n                    marginTop: '20px',\r\n                    marginBottom: '13px',\r\n                    marginLeft: '45px',\r\n                    padding: '0',\r\n                    fontSize: '0.8rem',\r\n                    lineHeight: '1',\r\n                    letterSpacing: '0.00938em',\r\n                    textAlign: 'left',\r\n                }}\r\n            >\r\n                {labels}{required ? '*' : ''}\r\n            </div>\r\n            <PhoneInput\r\n                required={required}\r\n                value={value ?? undefined}\r\n                onChange={onChange}\r\n                error={value ? (isValidPhoneNumber(value) ? undefined : 'Invalid phine number') : undefined\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputPhone;","import React, {FormEventHandler, useContext, useEffect, useState} from \"react\";\r\nimport {Divider, FormControl, FormControlLabel, FormLabel, Grid, Radio, RadioGroup} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete, {createFilterOptions} from \"@material-ui/lab/Autocomplete\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {countries, countryToFlag, countryToICountryType, tShirtOptions} from \"../../constants\";\r\nimport {ICountryType, ITShirtOptionType} from \"../../constants/interfaces\";\r\nimport LoadingBackground from \"../LoadingBackdrop\";\r\nimport {toast} from \"react-toastify\";\r\nimport {useObserver} from 'mobx-react';\r\nimport InputSubmit from \"../forms/InputSubmit\";\r\nimport {UserStoreContext} from \"../../providers/UserProvider\";\r\nimport InputPhone from \"../forms/InputPhone\";\r\n\r\nconst useStyles = makeStyles({\r\n    option: {\r\n        fontSize: 15,\r\n        '& > span': {\r\n            marginRight: 10,\r\n            fontSize: 18,\r\n        },\r\n    },\r\n});\r\n\r\nconst filter = createFilterOptions();\r\n\r\nexport const PersonalDetails: React.FC = () => {\r\n    const classes = useStyles();\r\n    const userStore = useContext(UserStoreContext);\r\n    const [loading, setLoading] = useState<boolean>(userStore?.loading ?? false);\r\n\r\n    const [fullName, setFullName] = useState<string | undefined>();\r\n    const [nickName, setNickName] = useState<string | undefined>();\r\n    const [address, setAddress] = useState<string | undefined>();\r\n    const [city, setCity] = useState<string | undefined>();\r\n    const [province, setProvince] = useState<string | undefined>();\r\n    const [country, setCountry] = useState<string | undefined>();\r\n    const [postcode, setPostcode] = useState<string | undefined>();\r\n    const [phone, setPhone] = useState<string | undefined>();\r\n    const [mobilePhone, setMobilePhone] = useState<string | undefined>();\r\n    const [waNumber, setWaNumber] = useState<string | undefined>();\r\n    const [facebook, setFacebook] = useState<string | undefined>();\r\n    const [instagram, setInstagram] = useState<string | undefined>();\r\n    const [socialMedia, setSocialMedia] = useState<string | undefined>();\r\n    const [tShirtSize, setTShirtSize] = useState<ITShirtOptionType | null>(null);\r\n    const [dateOfBirth, setDateOfBirth] = React.useState<Date | undefined>();\r\n    const [sex, setSex] = useState<string>('female');\r\n    const [maritalStatus, setMaritalStatus] = useState<string>('single');\r\n    const [religion, setReligion] = useState<string | undefined>();\r\n    const [passportNumber, setPassportNumber] = useState<string | undefined>();\r\n    const [expiryDate, setExpiryDate] = React.useState<Date | undefined>();\r\n\r\n    const [nationality, setNationality] = useState<string | undefined>();\r\n\r\n    useEffect(() => {\r\n        if (!userStore?.loading) {\r\n            setFullName(userStore?.personalDetails?.fullName);\r\n            setNickName(userStore?.personalDetails?.nickName);\r\n            setAddress(userStore?.personalDetails?.address);\r\n            setCity(userStore?.personalDetails?.city);\r\n            setProvince(userStore?.personalDetails?.province);\r\n            setCountry(userStore?.personalDetails?.country ?? countries[99].label);\r\n            setPostcode(userStore?.personalDetails?.postcode);\r\n            setPhone(userStore?.personalDetails?.phone);\r\n            setMobilePhone(userStore?.personalDetails?.mobilePhone);\r\n            setWaNumber(userStore?.personalDetails?.waNumber);\r\n            setFacebook(userStore?.personalDetails?.facebook);\r\n            setInstagram(userStore?.personalDetails?.instagram);\r\n            setSocialMedia(userStore?.personalDetails?.socialMedia);\r\n            setTShirtSize({size: userStore?.personalDetails?.tShirtSize ?? ''});\r\n            setDateOfBirth(userStore?.personalDetails?.dateOfBirth);\r\n            setSex(userStore?.personalDetails?.sex ?? 'female');\r\n            setMaritalStatus(userStore?.personalDetails?.maritalStatus ?? 'single');\r\n            setReligion(userStore?.personalDetails?.religion);\r\n            setPassportNumber(userStore?.personalDetails?.passportNumber);\r\n            setExpiryDate(userStore?.personalDetails?.expiryDate);\r\n            setNationality(userStore?.personalDetails?.nationality ?? countries[99].label);\r\n        }\r\n    }, [loading, userStore]);\r\n\r\n\r\n    const onSubmitHandler: FormEventHandler = async (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (!e?.currentTarget?.form?.reportValidity()) {\r\n            toast.info(\"Please complete all required data\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        const res = await userStore?.updatePersonalDetails({\r\n            fullName,\r\n            nickName,\r\n            address,\r\n            city,\r\n            province,\r\n            country,\r\n            postcode,\r\n            phone,\r\n            mobilePhone,\r\n            waNumber,\r\n            facebook,\r\n            instagram,\r\n            socialMedia,\r\n            tShirtSize: tShirtSize?.size,\r\n            dateOfBirth,\r\n            sex,\r\n            maritalStatus,\r\n            religion,\r\n            passportNumber,\r\n            expiryDate,\r\n            nationality\r\n        });\r\n        if (res?.hasError()) {\r\n            toast.error(res?.error?.message);\r\n            setLoading(false);\r\n        } else {\r\n            toast.success(\"Success updating Personal Detail's\");\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n\r\n    return useObserver(() => {\r\n        if (userStore?.loading)\r\n            return <LoadingBackground open={true}/>;\r\n\r\n        return (<>\r\n            {\r\n                // @ts-ignore}\r\n                <LoadingBackground open={loading || userStore.loading}/>\r\n            }\r\n            <Grid item>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Personal Details\r\n                </Typography>\r\n                <Divider/>\r\n                <form onSubmit={onSubmitHandler} style={{width: '80%', textAlign: 'center'}} noValidate={false}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Full name\"\r\n                        id=\"fullName\"\r\n                        name=\"fullName\"\r\n                        autoComplete=\"fullName\"\r\n                        value={fullName ?? ''}\r\n                        onChange={(e) => setFullName(e.currentTarget.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        label=\"Known as (if different)\"\r\n                        id=\"nickName\"\r\n                        name=\"nickName\"\r\n                        autoComplete=\"nickName\"\r\n                        value={nickName ?? ''}\r\n                        onChange={(e) => setNickName(e.currentTarget.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Address (please detail)\"\r\n                        id=\"address\"\r\n                        name=\"address\"\r\n                        autoComplete=\"address\"\r\n                        multiline={true}\r\n                        value={address ?? ''}\r\n                        onChange={(e) => setAddress(e.currentTarget.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        required\r\n                        label=\"City\"\r\n                        id=\"city\"\r\n                        name=\"city\"\r\n                        autoComplete=\"city\"\r\n                        value={city ?? ''}\r\n                        onChange={(e) => setCity(e.currentTarget.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        required\r\n                        label=\"Province\"\r\n                        id=\"province\"\r\n                        name=\"province\"\r\n                        autoComplete=\"province\"\r\n                        value={province ?? ''}\r\n                        onChange={(e) => setProvince(e.currentTarget.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        required\r\n                        label=\"Postcode\"\r\n                        id=\"postcode\"\r\n                        name=\"postcode\"\r\n                        autoComplete=\"postcode\"\r\n                        value={postcode ?? ''}\r\n                        onChange={(e) => setPostcode(e.currentTarget.value)}\r\n                    />\r\n                    <Autocomplete\r\n                        id=\"country-select-demo\"\r\n                        style={{width: '100%', marginTop: 16, marginBottom: 8}}\r\n                        options={countries as ICountryType[]}\r\n                        classes={{option: classes.option}}\r\n                        onChange={(e: any, v: any) => setCountry(v?.label)}\r\n                        value={countryToICountryType(userStore?.personalDetails?.country) ?? countries[99]}\r\n                        autoHighlight\r\n                        disableClearable={true}\r\n                        getOptionLabel={option => option.label}\r\n                        renderOption={option => (\r\n                            <React.Fragment>\r\n                                <span>{countryToFlag(option.code)}</span>\r\n                                {option.label} ({option.code}) +{option.phone}\r\n                            </React.Fragment>\r\n                        )}\r\n                        renderInput={(params: any) => (\r\n                            <TextField\r\n                                {...params}\r\n                                required\r\n                                label=\"Country\"\r\n                                variant=\"outlined\"\r\n                                inputProps={{\r\n                                    ...params.inputProps,\r\n                                    autoComplete: 'country', // disable autocomplete and autofill\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n\r\n                    <InputPhone\r\n                        required\r\n                        labels={'Mobile Phone number'}\r\n                        value={mobilePhone ?? ''}\r\n                        onChange={setMobilePhone}\r\n                    />\r\n                    <InputPhone\r\n                        labels={'Phone number'}\r\n                        value={phone ?? ''}\r\n                        onChange={setPhone}\r\n                    />\r\n                    <InputPhone\r\n                        labels={'Whatsapp number (if any)'}\r\n                        value={waNumber ?? ''}\r\n                        onChange={setWaNumber}\r\n                    />\r\n\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        label=\"Facebook (if any)\"\r\n                        id=\"facebook\"\r\n                        name=\"facebook\"\r\n                        autoComplete=\"facebook\"\r\n                        value={facebook ?? ''}\r\n                        onChange={(e) => setFacebook(e.currentTarget.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        label=\"Instagram (if any)\"\r\n                        id=\"instagram\"\r\n                        name=\"instagram\"\r\n                        autoComplete=\"instagram\"\r\n                        value={instagram ?? ''}\r\n                        onChange={(e) => setInstagram(e.currentTarget.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        label=\"Another social media\"\r\n                        id=\"socialMedia\"\r\n                        name=\"socialMedia\"\r\n                        autoComplete=\"socialMedia\"\r\n                        value={socialMedia ?? ''}\r\n                        onChange={(e) => setSocialMedia(e.currentTarget.value)}\r\n                    />\r\n                    <Autocomplete\r\n                        onChange={(event: any, newValue: ITShirtOptionType | null) => {\r\n                            if (newValue && newValue.inputValue) {\r\n                                setTShirtSize({\r\n                                    size: newValue.inputValue,\r\n                                });\r\n                                return;\r\n                            }\r\n\r\n                            setTShirtSize(newValue);\r\n                        }}\r\n                        filterOptions={(options, params) => {\r\n                            const filtered = filter(options, params) as ITShirtOptionType[];\r\n\r\n                            if (params.inputValue !== '') {\r\n                                filtered.push({\r\n                                    inputValue: params.inputValue,\r\n                                    size: `Add \"${params.inputValue}\"`,\r\n                                });\r\n                            }\r\n\r\n                            return filtered;\r\n                        }}\r\n                        id=\"T-Shirt-Size\"\r\n                        options={tShirtOptions as ITShirtOptionType[]}\r\n                        getOptionLabel={option => {\r\n                            // e.g value selected with enter, right from the input\r\n                            if (typeof option === 'string') {\r\n                                return option;\r\n                            }\r\n                            if (option.inputValue) {\r\n                                return option.inputValue;\r\n                            }\r\n                            return option.size;\r\n                        }}\r\n                        renderOption={option => option.size}\r\n                        style={{width: '100%', marginTop: 16, marginBottom: 8}}\r\n                        freeSolo\r\n                        disableClearable={true}\r\n                        value={tShirtSize}\r\n                        renderInput={params => (\r\n                            <TextField\r\n                                {...params}\r\n                                required\r\n                                fullWidth\r\n                                label=\"T-Shirt size\" variant=\"outlined\"/>\r\n                        )}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        required\r\n                        id=\"date-of-birth\"\r\n                        label=\"Date of birth\"\r\n                        type=\"date\"\r\n                        value={dateOfBirth?.toISOString().split('T')[0] ?? ''}\r\n                        onChange={(e) => setDateOfBirth(new Date(e.currentTarget.value))}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n                    <FormControl\r\n                        component=\"fieldset\"\r\n                        style={{width: '100%', marginTop: 16, marginBottom: 8, textAlign: 'left'}}\r\n                    >\r\n                        <FormLabel component=\"legend\">Gender</FormLabel>\r\n                        <RadioGroup\r\n                            aria-label=\"sex\"\r\n                            name=\"sex\"\r\n                            value={sex}\r\n                            onChange={(e) => setSex(e.currentTarget.value)}\r\n                        >\r\n                            <FormControlLabel value=\"female\" control={<Radio/>} label=\"Female\"/>\r\n                            <FormControlLabel value=\"male\" control={<Radio/>} label=\"Male\"/>\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n\r\n                    <FormControl\r\n                        component=\"fieldset\"\r\n                        style={{width: '100%', marginTop: 16, marginBottom: 8, textAlign: 'left'}}\r\n                    >\r\n                        <FormLabel component=\"legend\">Marital status</FormLabel>\r\n                        <RadioGroup\r\n                            aria-label=\"maritalStatus\"\r\n                            name=\"maritalStatus\"\r\n                            value={maritalStatus}\r\n                            onChange={(e) => setMaritalStatus(e.currentTarget.value)}\r\n                        >\r\n                            <FormControlLabel value=\"single\" control={<Radio/>} label=\"Single\"/>\r\n                            <FormControlLabel value=\"married\" control={<Radio/>} label=\"Married\"/>\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        label=\"Your religion (if any)\"\r\n                        id=\"religion\"\r\n                        name=\"religion\"\r\n                        autoComplete=\"religion\"\r\n                        value={religion ?? ''}\r\n                        onChange={(e) => setReligion(e.currentTarget.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Passport number\"\r\n                        id=\"passportNumber\"\r\n                        name=\"passportNumber\"\r\n                        autoComplete=\"passportNumber\"\r\n                        value={passportNumber ?? ''}\r\n                        onChange={(e) => setPassportNumber(e.currentTarget.value)}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        required\r\n                        id=\"expiry-date\"\r\n                        label=\"Expiry date (Passport)\"\r\n                        type=\"date\"\r\n                        value={expiryDate?.toISOString().split('T')[0] ?? ''}\r\n                        onChange={(e) => setExpiryDate(new Date(e.currentTarget.value))}\r\n                        InputLabelProps={{\r\n                            shrink: true,\r\n                        }}\r\n                    />\r\n\r\n                    <Autocomplete\r\n                        id=\"nationality-select-demo\"\r\n                        style={{width: '100%', marginTop: 16, marginBottom: 8}}\r\n                        options={countries as ICountryType[]}\r\n                        classes={{option: classes.option}}\r\n                        onChange={(e: any, v: any) => setNationality(v?.label)}\r\n                        value={countryToICountryType(userStore?.personalDetails?.nationality) ?? countries[99]}\r\n                        autoHighlight\r\n                        disableClearable={true}\r\n                        getOptionLabel={option => option.label}\r\n                        renderOption={option => (\r\n                            <React.Fragment>\r\n                                <span>{countryToFlag(option.code)}</span>\r\n                                {option.label} ({option.code}) +{option.phone}\r\n                            </React.Fragment>\r\n                        )}\r\n                        renderInput={(params: any) => (\r\n                            <TextField\r\n                                {...params}\r\n                                required\r\n                                label=\"Nationality\"\r\n                                variant=\"outlined\"\r\n                                inputProps={{\r\n                                    ...params.inputProps,\r\n                                    autoComplete: 'nationality', // disable autocomplete and autofill\r\n                                }}\r\n                            />\r\n                        )}\r\n                    />\r\n                    <InputSubmit disabled={userStore?.configApplicationForm.isSubmitted}\r\n                                 label={\"Save\"} onClick={onSubmitHandler}/>\r\n                </form>\r\n            </Grid>\r\n        </>);\r\n    });\r\n};","import React from 'react';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {FilledInputProps} from \"@material-ui/core/FilledInput\";\r\n\r\ninterface IInputTextField {\r\n    value?: string,\r\n    label: string,\r\n    helperText?: string,\r\n    id?: string,\r\n    onChange?: FilledInputProps['onChange'];\r\n    required?: boolean,\r\n    multiline?: boolean,\r\n    rows?: number,\r\n    rowsMax?: number,\r\n    error?: boolean,\r\n    type?: string,\r\n}\r\n\r\nconst InputTextField: React.FC<IInputTextField> = ({\r\n                                                       value,\r\n                                                       label,\r\n                                                       id,\r\n                                                       required = false,\r\n                                                       multiline = false,\r\n                                                       helperText,\r\n                                                       onChange,\r\n                                                       rows = 1,\r\n                                                       rowsMax = 1,\r\n                                                       error,\r\n                                                       type\r\n                                                   }) => {\r\n    return (<TextField\r\n        variant=\"outlined\"\r\n        margin=\"normal\"\r\n        fullWidth\r\n        required={required}\r\n        label={label}\r\n        id={id}\r\n        name={id}\r\n        autoComplete={id}\r\n        multiline={multiline}\r\n        helperText={helperText}\r\n        value={value ?? ''}\r\n        onChange={onChange}\r\n        rows={rows}\r\n        rowsMax={rowsMax}\r\n        error={error}\r\n        type={type}\r\n    />);\r\n};\r\n\r\nexport default InputTextField;","import React from 'react';\r\nimport {FilledInputProps} from \"@material-ui/core/FilledInput\";\r\nimport {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@material-ui/core\";\r\nimport {IInputRadioGroupData} from \"../../constants/interfaces\";\r\nimport cuid from \"cuid\";\r\n\r\ninterface IInputRadioGroup {\r\n    value?: string,\r\n    label: string,\r\n    id?: string,\r\n    onChange?: FilledInputProps['onChange'];\r\n    required?: boolean,\r\n    options: IInputRadioGroupData[],\r\n}\r\n\r\nconst InputRadioGroup: React.FC<IInputRadioGroup> = ({\r\n                                                         id,\r\n                                                         label,\r\n                                                         value,\r\n                                                         options,\r\n                                                         required = false,\r\n                                                         onChange,\r\n                                                     }) => {\r\n\r\n    return (<FormControl\r\n        component=\"fieldset\"\r\n        required={required}\r\n        style={{width: '100%', marginTop: 16, marginBottom: 8, textAlign: 'left'}}\r\n    >\r\n        <FormLabel component=\"legend\">{label}</FormLabel>\r\n        <RadioGroup\r\n            aria-label={id}\r\n            name={id}\r\n            value={value}\r\n            onChange={onChange}\r\n        >\r\n            {options.map((data) => (\r\n                <FormControlLabel\r\n                    key={cuid()}\r\n                    value={data.value}\r\n                    control={<Radio/>}\r\n                    label={data.label}\r\n                />\r\n            ))}\r\n        </RadioGroup>\r\n    </FormControl>);\r\n};\r\n\r\nexport default InputRadioGroup;","import React from 'react';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport {ICountryType} from \"../../constants/interfaces\";\r\nimport {countries, countryToFlag, countryToICountryType} from \"../../constants\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n    option: {\r\n        fontSize: 15,\r\n        '& > span': {\r\n            marginRight: 10,\r\n            fontSize: 18,\r\n        },\r\n    },\r\n});\r\n\r\ninterface IInputAutoComplete {\r\n    value?: string,\r\n    label: string,\r\n    id?: string,\r\n    onChange?: (event: React.ChangeEvent<{}>, value: any | null) => void;\r\n}\r\n\r\nconst InputAutoCompleteForCountry: React.FC<IInputAutoComplete> = ({\r\n                                                                       value,\r\n                                                                       label,\r\n                                                                       id,\r\n                                                                       onChange,\r\n                                                                   }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Autocomplete\r\n            id=\"nationality-select-demo\"\r\n            style={{width: '100%', marginTop: 16, marginBottom: 8}}\r\n            options={countries as ICountryType[]}\r\n            classes={{option: classes.option}}\r\n            onChange={onChange}\r\n            value={countryToICountryType(value)}\r\n            autoHighlight\r\n            disableClearable={true}\r\n            getOptionLabel={option => option.label}\r\n            renderOption={option => (\r\n                <React.Fragment>\r\n                    <span>{countryToFlag(option.code)}</span>\r\n                    {option.label} ({option.code}) +{option.phone}\r\n                </React.Fragment>\r\n            )}\r\n            renderInput={(params: any) => (\r\n                <TextField\r\n                    {...params}\r\n                    required\r\n                    id={id}\r\n                    name={id}\r\n                    label={label}\r\n                    variant=\"outlined\"\r\n                    inputProps={{\r\n                        ...params.inputProps,\r\n                        autoComplete: 'nationality', // disable autocomplete and autofill\r\n                    }}\r\n                />\r\n            )}\r\n        />);\r\n};\r\n\r\nexport default InputAutoCompleteForCountry;","import React, {FormEventHandler, useContext, useEffect, useState} from \"react\";\r\nimport {Divider, Grid} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {IInputRadioGroupData} from \"../../constants/interfaces\";\r\nimport LoadingBackground from \"../LoadingBackdrop\";\r\nimport {toast} from \"react-toastify\";\r\nimport {useObserver} from 'mobx-react';\r\nimport InputTextField from \"../forms/InputTextField\";\r\nimport InputRadioGroup from \"../forms/InputRadioGroup\";\r\nimport {countries, degreeOptions} from \"../../constants/options\";\r\nimport InputAutoCompleteForCountry from \"../forms/InputAutoCompleteForCountry\";\r\nimport InputSubmit from \"../forms/InputSubmit\";\r\nimport {UserStoreContext} from \"../../providers/UserProvider\";\r\n\r\nexport const EducationBackground: React.FC = () => {\r\n    const userStore = useContext(UserStoreContext);\r\n    const [loading, setLoading] = useState<boolean>(userStore?.loading ?? false);\r\n\r\n    const [latestDegree, setLatestDegree] = useState<string | undefined>();\r\n    const [homeUniversity, setHomeUniversity] = useState<string | undefined>();\r\n    const [faculty, setFaculty] = useState<string | undefined>();\r\n    const [department, setDepartment] = useState<string | undefined>();\r\n    const [country, setCountry] = useState<string | undefined>();\r\n\r\n    useEffect(() => {\r\n        if (!userStore?.loading) {\r\n            setLatestDegree(userStore?.educationBackground?.latestDegree ?? degreeOptions[0]);\r\n            setHomeUniversity(userStore?.educationBackground?.homeUniversity);\r\n            setFaculty(userStore?.educationBackground?.faculty);\r\n            setDepartment(userStore?.educationBackground?.department);\r\n            setCountry(userStore?.educationBackground?.country ?? countries[99].label);\r\n        }\r\n    }, [loading, userStore]);\r\n\r\n\r\n    const onSubmitHandler: FormEventHandler = async (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (!e?.currentTarget?.form?.reportValidity()) {\r\n            toast.info(\"Please complete all required data\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        const res = await userStore?.updateEducationBackground({\r\n            latestDegree,\r\n            homeUniversity,\r\n            faculty,\r\n            department,\r\n            country,\r\n        });\r\n        if (res?.hasError()) {\r\n            toast.error(res?.error?.message);\r\n            setLoading(false);\r\n        } else {\r\n            toast.success(\"Success updating Education Background\");\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n\r\n    return useObserver(() => {\r\n        if (userStore?.loading)\r\n            return <LoadingBackground open={true}/>;\r\n\r\n        return (<>\r\n            {\r\n                // @ts-ignore}\r\n                <LoadingBackground open={loading || userStore.loading}/>\r\n            }\r\n            <Grid item>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Education Background\r\n                </Typography>\r\n                <Divider/>\r\n                <form onSubmit={onSubmitHandler} style={{width: '80%', textAlign: 'center'}} noValidate={false}>\r\n                    <InputRadioGroup\r\n                        options={degreeOptions.map((data) => {\r\n                            return {\r\n                                label: data,\r\n                                value: data,\r\n                            } as IInputRadioGroupData;\r\n                        })}\r\n                        label={'Latest degree'}\r\n                        id={'latestDegree'}\r\n                        value={latestDegree ?? degreeOptions[0]}\r\n                        onChange={(e) => setLatestDegree(e.currentTarget.value)}\r\n                        required={true}\r\n                    />\r\n                    <InputTextField\r\n                        value={homeUniversity}\r\n                        id={'homeUniversity'}\r\n                        label={\"Home University / Institution / Affiliation\"}\r\n                        onChange={(e) => setHomeUniversity(e.currentTarget.value)}\r\n                        required={true}\r\n                    />\r\n                    <InputTextField\r\n                        value={faculty}\r\n                        id={'faculty'}\r\n                        label={\"Faculty / Division\"}\r\n                        onChange={(e) => setFaculty(e.currentTarget.value)}\r\n                    />\r\n                    <InputTextField\r\n                        value={department}\r\n                        id={'department'}\r\n                        label={\"Department / Position\"}\r\n                        onChange={(e) => setDepartment(e.currentTarget.value)}\r\n                    />\r\n                    <InputAutoCompleteForCountry\r\n                        label={\"Country\"}\r\n                        value={country ?? countries[99].label}\r\n                        onChange={(e: any, v: any) => setCountry(v?.label)}\r\n                    />\r\n\r\n                    <InputSubmit disabled={userStore?.configApplicationForm.isSubmitted}\r\n                                 label={\"Save\"} onClick={onSubmitHandler}/>\r\n                </form>\r\n            </Grid>\r\n        </>);\r\n    });\r\n};","import React, {useEffect, useState} from 'react';\r\nimport {Checkbox, createStyles, FormControl, FormControlLabel, FormGroup, FormLabel} from \"@material-ui/core\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport cuid from \"cuid\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        formControl: {\r\n            width: '100%',\r\n            marginTop: 16,\r\n            marginBottom: 8,\r\n            textAlign: 'left',\r\n        },\r\n    }),\r\n);\r\n\r\ninterface IInputCheckboxGroup {\r\n    values: string[],\r\n    options: string[],\r\n    onChange: (value: string[]) => void,\r\n    label?: string,\r\n    required?: boolean,\r\n}\r\n\r\ninterface IState {\r\n    value: string,\r\n    check: boolean,\r\n}\r\n\r\nconst InputCheckboxGroup: React.FC<IInputCheckboxGroup> = ({\r\n                                                               values,\r\n                                                               options,\r\n                                                               label = \"Label\",\r\n                                                               onChange,\r\n                                                               required = false,\r\n                                                           }) => {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState<IState[]>(options.map((data) => {\r\n        return {\r\n            value: data,\r\n            check: false,\r\n        } as IState;\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if (values?.length > 0)\r\n            setState(state.map((data) => {\r\n                values?.forEach((val) => data.check = val === data.value ? true : data.check);\r\n                return data;\r\n            }));\r\n        // eslint-disable-next-line\r\n    }, [values]);\r\n\r\n    const handleChange = (selectedData: IState) => () => {\r\n        setState(state.map((data) => {\r\n            if (selectedData === data) {\r\n                selectedData.check = !selectedData.check;\r\n                return selectedData;\r\n            }\r\n\r\n            return data;\r\n        }));\r\n\r\n        values = state.filter((data) => data.check).map((data) => data.value);\r\n        onChange(values);\r\n    };\r\n\r\n    return (\r\n        <FormControl\r\n            required={required}\r\n            component=\"fieldset\"\r\n            className={classes.formControl}\r\n        >\r\n            <FormLabel component=\"legend\">{label}</FormLabel>\r\n            <FormGroup>\r\n                {state.map((data) => (\r\n                    <FormControlLabel\r\n                        key={cuid()}\r\n                        control={<Checkbox checked={data.check} onChange={handleChange(data)} value={data.value}/>}\r\n                        label={data.value}\r\n                    />\r\n                ))}\r\n            </FormGroup>\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport default InputCheckboxGroup;","import React, {FormEventHandler, useContext, useEffect, useState} from \"react\";\r\nimport {Divider, Grid, Typography} from \"@material-ui/core\";\r\nimport LoadingBackground from \"../LoadingBackdrop\";\r\nimport {toast} from \"react-toastify\";\r\nimport {useObserver} from 'mobx-react';\r\nimport InputTextField from \"../forms/InputTextField\";\r\nimport {dietaryRestrictionOptions, disabilityOptions} from \"../../constants/options\";\r\nimport InputSubmit from \"../forms/InputSubmit\";\r\nimport InputCheckboxGroup from \"../forms/InputCheckboxGroup\";\r\nimport {IInputRadioGroupData} from \"../../constants/interfaces\";\r\nimport InputRadioGroup from \"../forms/InputRadioGroup\";\r\nimport {UserStoreContext} from \"../../providers/UserProvider\";\r\n\r\nexport const HealthCondition: React.FC = () => {\r\n    const userStore = useContext(UserStoreContext);\r\n    const [loading, setLoading] = useState<boolean>(userStore?.loading ?? false);\r\n\r\n\r\n    const [dietaryRestriction, setDietaryRestriction] = useState<string[] | undefined>();\r\n    const [dietaryDetail, setDietaryDetail] = useState<string | undefined>();\r\n    const [disability, setDisability] = useState<string | undefined>();\r\n    const [disabilityDetail, setDisabilityDetail] = useState<string | undefined>();\r\n    const [medicalCondition, setMedicalCondition] = useState<string | undefined>();\r\n    const [specialRequirements, setSpecialRequirements] = useState<string | undefined>();\r\n\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setDietaryRestriction(userStore?.healthCondition?.dietaryRestriction);\r\n            setDietaryDetail(userStore?.healthCondition?.dietaryDetail);\r\n            setDisability(userStore?.healthCondition?.disability ?? disabilityOptions[1]);\r\n            setDisabilityDetail(userStore?.healthCondition?.disabilityDetail);\r\n            setMedicalCondition(userStore?.healthCondition?.medicalCondition);\r\n            setSpecialRequirements(userStore?.healthCondition?.specialRequirements);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [loading]);\r\n\r\n\r\n    const onSubmitHandler: FormEventHandler = async (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n\r\n        setLoading(true);\r\n        const res = await userStore?.updateHealthCondition({\r\n            dietaryRestriction,\r\n            dietaryDetail,\r\n            disability,\r\n            disabilityDetail,\r\n            medicalCondition,\r\n            specialRequirements,\r\n        });\r\n        if (res?.hasError()) {\r\n            toast.error(res?.error?.message);\r\n            setLoading(false);\r\n        } else {\r\n            toast.success(\"Success updating Health Condition\");\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    return useObserver(() => {\r\n        return (<>\r\n            {\r\n                // @ts-ignore\r\n                <LoadingBackground open={loading || userStore.loading}/>\r\n            }\r\n            <Grid item>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Dietary and Health Condition\r\n                </Typography>\r\n                <Divider/>\r\n                <form onSubmit={onSubmitHandler} style={{width: '80%', textAlign: 'center'}}>\r\n                    <InputCheckboxGroup\r\n                        label={'Dietary Restriction'}\r\n                        options={dietaryRestrictionOptions}\r\n                        values={dietaryRestriction ?? []}\r\n                        onChange={(data) => setDietaryRestriction(data)}\r\n                        required={true}\r\n                    />\r\n                    <InputTextField\r\n                        value={dietaryDetail}\r\n                        id={'dietaryDetail'}\r\n                        label={\"For other or specific dietary, please specify here\"}\r\n                        onChange={(e) => setDietaryDetail(e.currentTarget.value)}\r\n                        multiline={true}\r\n                    />\r\n                    <InputRadioGroup\r\n                        options={disabilityOptions.map((data) => {\r\n                            return {\r\n                                label: data,\r\n                                value: data,\r\n                            } as IInputRadioGroupData;\r\n                        })}\r\n                        label={'Do you have any disability?'}\r\n                        id={'disabilitylatestDegree'}\r\n                        value={disability ?? disabilityOptions[1]}\r\n                        onChange={(e) => setDisability(e.currentTarget.value)}\r\n                        required={true}\r\n                    />\r\n                    <InputTextField\r\n                        value={disabilityDetail}\r\n                        id={'disabilityDetail'}\r\n                        label={\"If you have any disabilities, please specify here\"}\r\n                        onChange={(e) => setDisabilityDetail(e.currentTarget.value)}\r\n                        multiline={true}\r\n                    />\r\n                    <InputTextField\r\n                        value={medicalCondition}\r\n                        id={'medicalCondition'}\r\n                        label={\"Please specify any medical condition you suffer\"}\r\n                        helperText={' from and any medication taken. (if any)'}\r\n                        onChange={(e) => setMedicalCondition(e.currentTarget.value)}\r\n                        multiline={true}\r\n                    />\r\n                    <InputTextField\r\n                        value={specialRequirements}\r\n                        id={'specialRequirements'}\r\n                        label={\"Any other special requirements or sensitive\"}\r\n                        helperText={\"Any issues we should be aware of\"}\r\n                        onChange={(e) => setSpecialRequirements(e.currentTarget.value)}\r\n                        multiline={true}\r\n                    />\r\n                    <InputSubmit disabled={userStore?.configApplicationForm.isSubmitted}\r\n                                 label={\"Save\"} onClick={onSubmitHandler}/>\r\n                </form>\r\n            </Grid>\r\n        </>);\r\n    });\r\n};","import React, {FormEventHandler, useContext, useEffect, useState} from \"react\";\r\nimport {Divider, Grid, Typography} from \"@material-ui/core\";\r\nimport LoadingBackground from \"../LoadingBackdrop\";\r\nimport {toast} from \"react-toastify\";\r\nimport {useObserver} from 'mobx-react';\r\nimport InputTextField from \"../forms/InputTextField\";\r\nimport {informationSourceOptions} from \"../../constants/options\";\r\nimport InputSubmit from \"../forms/InputSubmit\";\r\nimport InputCheckboxGroup from \"../forms/InputCheckboxGroup\";\r\nimport {UserStoreContext} from \"../../providers/UserProvider\";\r\n\r\nexport const PersonalStatement: React.FC = () => {\r\n    const userStore = useContext(UserStoreContext);\r\n    const [loading, setLoading] = useState<boolean>(userStore?.loading ?? false);\r\n\r\n\r\n    const [informationSources, setInformationSources] = useState<string[] | undefined>();\r\n    const [motivation, setMotivation] = useState<string | undefined>();\r\n    const [additionalInformationSources, setAdditionalInformationSources] = useState<string | undefined>();\r\n    const [personalExperiences, setPersonalExperiences] = useState<string | undefined>();\r\n    const [specialitiesDescribe, setSpecialitiesDescribe] = useState<string | undefined>();\r\n    const [afterProgram, setAfterProgram] = useState<string | undefined>();\r\n    const [othersIsChecked, setOthersIsChecked] = useState<boolean>(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setInformationSources(userStore?.personalStatement?.informationSources);\r\n            setAdditionalInformationSources(userStore?.personalStatement?.additionalInformationSources);\r\n            setMotivation(userStore?.personalStatement?.motivation);\r\n            setPersonalExperiences(userStore?.personalStatement?.personalExperiences);\r\n            setSpecialitiesDescribe(userStore?.personalStatement?.specialitiesDescribe);\r\n            setAfterProgram(userStore?.personalStatement?.afterProgram);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [loading]);\r\n\r\n\r\n    function isValueError(val?: string, showToast: boolean = false, messageToast: string = 'val'): boolean {\r\n        if (val) {\r\n            if (val?.split(' ')?.length > 500) {\r\n                if (showToast) toast.error(`Please check your ${messageToast} field again`);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const onSubmitHandler: FormEventHandler = async (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n\r\n\r\n        if (!e?.currentTarget?.form?.reportValidity()) {\r\n            toast.info(\"Please complete all required data\");\r\n            return;\r\n        }\r\n\r\n\r\n        if (\r\n            isValueError(motivation, true, 'motivation') ||\r\n            isValueError(personalExperiences, true, 'personal experiences')\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        const res = await userStore?.updatePersonalStatement({\r\n            informationSources,\r\n            motivation,\r\n            personalExperiences,\r\n            specialitiesDescribe,\r\n            afterProgram,\r\n            additionalInformationSources,\r\n        });\r\n        if (res?.hasError()) {\r\n            toast.error(res?.error?.message);\r\n            setLoading(false);\r\n        } else {\r\n            toast.success(\"Success updating Personal Statement\");\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (informationSources) {\r\n            if (informationSources.includes(`Other's`))\r\n                setOthersIsChecked(true);\r\n            else\r\n                setOthersIsChecked(false);\r\n        }\r\n    }, [informationSources]);\r\n\r\n    return useObserver(() => {\r\n        return (<>\r\n            {\r\n                // @ts-ignore\r\n                <LoadingBackground open={loading || userStore.loading}/>\r\n            }\r\n            <Grid item>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Personal Statement\r\n                </Typography>\r\n                <Divider/>\r\n                <form onSubmit={onSubmitHandler} style={{width: '80%', textAlign: 'center'}}>\r\n                    <InputTextField\r\n                        value={motivation}\r\n                        id={'motivation'}\r\n                        label={\"Please tell us your motivation for applying\"}\r\n                        helperText={\"What knowledge you seek to gain, and how UM iCamp program would benefit from your attendance (max. 500 words)*\"}\r\n                        onChange={(e) => setMotivation(e.currentTarget.value)}\r\n                        multiline={true}\r\n                        // required={true}\r\n                        rows={3}\r\n                        rowsMax={8}\r\n                        error={isValueError(motivation)}\r\n                    />\r\n                    <InputTextField\r\n                        value={personalExperiences}\r\n                        id={'personalExperiences'}\r\n                        label={\"Please share your personal experiences in school or your community\"}\r\n                        helperText={\" As it relates to the previous short essay (max. 500 words)*\"}\r\n                        onChange={(e) => setPersonalExperiences(e.currentTarget.value)}\r\n                        multiline={true}\r\n                        // required={true}\r\n                        rows={3}\r\n                        rowsMax={8}\r\n                        error={isValueError(personalExperiences)}\r\n                    />\r\n                    <InputTextField\r\n                        value={specialitiesDescribe}\r\n                        id={'specialitiesDescribe'}\r\n                        label={\"Describe your traits, uniqueness or specialities\"}\r\n                        helperText={\"That makes you the most suitable candidate for the program\"}\r\n                        onChange={(e) => setSpecialitiesDescribe(e.currentTarget.value)}\r\n                        multiline={true}\r\n                        required={true}\r\n                        rows={3}\r\n                        rowsMax={8}\r\n                    />\r\n                    <InputTextField\r\n                        value={afterProgram}\r\n                        id={'afterProgram'}\r\n                        label={\"What is your plan after participating in this program?\"}\r\n                        onChange={(e) => setAfterProgram(e.currentTarget.value)}\r\n                        multiline={true}\r\n                        required={true}\r\n                        rows={3}\r\n                        rowsMax={8}\r\n                    />\r\n                    <InputCheckboxGroup\r\n                        label={'How did you hear about UM iCamp?'}\r\n                        options={informationSourceOptions}\r\n                        values={informationSources ?? []}\r\n                        onChange={(data) => setInformationSources(data)}\r\n                        required={true}\r\n                    />\r\n                    {\r\n                        othersIsChecked ?\r\n                            <InputTextField\r\n                                value={additionalInformationSources}\r\n                                id={'additionalInformationSources'}\r\n                                label={\"Please input here\"}\r\n                                onChange={(e) => setAdditionalInformationSources(e.currentTarget.value)}\r\n                            /> : <></>\r\n                    }\r\n                    <InputSubmit disabled={userStore?.configApplicationForm.isSubmitted}\r\n                                 label={\"Save\"} onClick={onSubmitHandler}/>\r\n                </form>\r\n            </Grid>\r\n        </>);\r\n    });\r\n};\r\n\r\n","import React, {FormEventHandler, useContext, useEffect, useState} from \"react\";\r\nimport {Divider, Grid, Typography} from \"@material-ui/core\";\r\nimport LoadingBackground from \"../LoadingBackdrop\";\r\nimport {toast} from \"react-toastify\";\r\nimport {useObserver} from 'mobx-react';\r\nimport InputTextField from \"../forms/InputTextField\";\r\nimport {countries} from \"../../constants\";\r\nimport InputSubmit from \"../forms/InputSubmit\";\r\nimport {UserStoreContext} from \"../../providers/UserProvider\";\r\nimport InputAutoCompleteForCountry from \"../forms/InputAutoCompleteForCountry\";\r\nimport InputPhone from \"../forms/InputPhone\";\r\n\r\nexport const EmergencyContactDetail: React.FC = () => {\r\n    const userStore = useContext(UserStoreContext);\r\n    const [loading, setLoading] = useState<boolean>(userStore?.loading ?? false);\r\n\r\n    const [fullName, setFullName] = useState<string | undefined>();\r\n    const [relationship, setRelationship] = useState<string | undefined>();\r\n    const [email, setEmail] = useState<string | undefined>();\r\n    const [phone, setPhone] = useState<string | undefined>();\r\n    const [address, setAddress] = useState<string | undefined>();\r\n    const [city, setCity] = useState<string | undefined>();\r\n    const [province, setProvince] = useState<string | undefined>();\r\n    const [country, setCountry] = useState<string | undefined>();\r\n    const [postcode, setPostcode] = useState<string | undefined>();\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setFullName(userStore?.emergencyContact?.fullName);\r\n            setRelationship(userStore?.emergencyContact?.relationship);\r\n            setEmail(userStore?.emergencyContact?.email);\r\n            setPhone(userStore?.emergencyContact?.phone);\r\n            setAddress(userStore?.emergencyContact?.address);\r\n            setCity(userStore?.emergencyContact?.city);\r\n            setProvince(userStore?.emergencyContact?.province);\r\n            setCountry(userStore?.emergencyContact?.country ??countries[99].label);\r\n            setPostcode(userStore?.emergencyContact?.postcode);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [loading]);\r\n\r\n\r\n    const onSubmitHandler: FormEventHandler = async (e: React.FormEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n\r\n\r\n        if (!e?.currentTarget?.form?.reportValidity()) {\r\n            toast.info(\"Please complete all required data\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n\r\n        const res = await userStore?.updateEmergencyContact({\r\n            fullName,\r\n            relationship,\r\n            email,\r\n            phone,\r\n            address,\r\n            city,\r\n            province,\r\n            country,\r\n            postcode,\r\n        });\r\n        if (res?.hasError()) {\r\n            toast.error(res?.error?.message);\r\n            setLoading(false);\r\n        } else {\r\n            toast.success(\"Success updating Emergency Contact\");\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    return useObserver(() => {\r\n        return (<>\r\n            {\r\n                // @ts-ignore\r\n                <LoadingBackground open={loading || userStore.loading}/>\r\n            }\r\n            <Grid item>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Emergency Contact Detail\r\n                </Typography>\r\n                <Divider/>\r\n                <form onSubmit={onSubmitHandler} style={{width: '80%', textAlign: 'center'}}>\r\n\r\n                    <InputTextField\r\n                        value={fullName}\r\n                        id={'fullName'}\r\n                        label={\"Full name\"}\r\n                        onChange={(e) => setFullName(e.currentTarget.value)}\r\n                        required={true}\r\n                    />\r\n                    <InputTextField\r\n                        value={relationship}\r\n                        id={'relationship'}\r\n                        label={\"Relationship to participant\"}\r\n                        onChange={(e) => setRelationship(e.currentTarget.value)}\r\n                        required={true}\r\n                    />\r\n                    <InputTextField\r\n                        value={email}\r\n                        id={'email'}\r\n                        label={\"E-mail\"}\r\n                        onChange={(e) => setEmail(e.currentTarget.value)}\r\n                        required={true}\r\n                        type={'email'}\r\n                    />\r\n                    <InputPhone\r\n                        required\r\n                        labels={'Phone or Whatsapp number'}\r\n                        value={phone ?? ''}\r\n                        onChange={setPhone}\r\n                    />\r\n                    <InputTextField\r\n                        value={address}\r\n                        id={'address'}\r\n                        label={\"Address\"}\r\n                        onChange={(e) => setAddress(e.currentTarget.value)}\r\n                        required={true}\r\n                        multiline={true}\r\n                    />\r\n                    <InputTextField\r\n                        value={city}\r\n                        id={'city'}\r\n                        label={\"City\"}\r\n                        onChange={(e) => setCity(e.currentTarget.value)}\r\n                        required={true}\r\n                        multiline={true}\r\n                    />\r\n                    <InputTextField\r\n                        value={province}\r\n                        id={'province'}\r\n                        label={\"Province\"}\r\n                        onChange={(e) => setProvince(e.currentTarget.value)}\r\n                        required={true}\r\n                    />\r\n                    <InputAutoCompleteForCountry\r\n                        label={\"Country\"}\r\n                        value={country ?? countries[99].label}\r\n                        onChange={(e: any, v: any) => setCountry(v?.label)}\r\n                    />\r\n                    <InputTextField\r\n                        value={postcode}\r\n                        id={'postcode'}\r\n                        label={\"Postcode\"}\r\n                        onChange={(e) => setPostcode(e.currentTarget.value)}\r\n                        required={true}\r\n                    />\r\n                    <InputSubmit\r\n                        disabled={userStore?.configApplicationForm.isSubmitted}\r\n                        label={\"Save\"}\r\n                        onClick={onSubmitHandler}/>\r\n                </form>\r\n            </Grid>\r\n        </>);\r\n    });\r\n};\r\n\r\n","// const hash = window.location.hash; // \"#2\"\r\nconst hostname = window.location.hostname; // \"localhost\"\r\n// const href = window.location.href; // \"http://localhost:4200/landing?query=1#2\"\r\n// const origin = window.location.origin; // \"http://localhost:4200\"\r\n// const pathname = window.location.pathname; // \"/landing\"\r\n// const port = window.location.port; // \"4200\"\r\n// const protocol = window.location.protocol; // \"http:\"\r\n// const search = window.location.search; // \"?query=1\"\r\n\r\nexport const HOST_NAME = hostname === 'localhost' || hostname === 'oia.um.test' ?\r\n    'http://oia.um.test/umicamp' :\r\n    'http://oia.um.ac.id/umicamp';\r\n\r\nexport const API = `${HOST_NAME}/api`;\r\nexport const UPLOAD_MEDIA = `${HOST_NAME}/upload-media`;\r\n\r\n\r\n\r\nexport const FOR_UPLOAD_MEDIA = '/upload/index.php';","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {Divider, Grid, Typography} from \"@material-ui/core\";\r\nimport LoadingBackground from \"../LoadingBackdrop\";\r\nimport {toast} from \"react-toastify\";\r\nimport {useObserver} from 'mobx-react';\r\nimport {UserStoreContext} from \"../../providers/UserProvider\";\r\nimport InputUploadMedia, {AcceptedFileTypes, ExampleTypeOptions} from \"../forms/InputUploadMedia\";\r\n\r\nenum InputType {\r\n    passportPhoto,\r\n    passportScan,\r\n    medicalCertificate,\r\n    declarationLetter,\r\n}\r\n\r\nexport const ApplicantMedia: React.FC = () => {\r\n    const userStore = useContext(UserStoreContext);\r\n    const [loading, setLoading] = useState<boolean>(userStore?.loading ?? false);\r\n\r\n    const [passportPhoto, setPassportPhoto] = useState<string | undefined>();\r\n    const [passportScan, setPassportScan] = useState<string | undefined>();\r\n    const [medicalCertificate, setMedicalCertificate] = useState<string | undefined>();\r\n    const [declarationLetter, setDeclarationLetter] = useState<string | undefined>();\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setPassportPhoto(userStore?.applicantMedia?.passportPhoto);\r\n            setPassportScan(userStore?.applicantMedia?.passportScan);\r\n            setMedicalCertificate(userStore?.applicantMedia?.medicalCertificate);\r\n            setDeclarationLetter(userStore?.applicantMedia?.declarationLetter);\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [loading]);\r\n\r\n    const onSubmittedMedia = async (error: boolean, inputType: InputType, url?: string) => {\r\n        if (!error) {\r\n            setLoading(true);\r\n            let hasError: boolean = false;\r\n\r\n            switch (inputType) {\r\n                case InputType.passportPhoto:\r\n                    hasError = (await userStore?.updateApplicantMedia({\r\n                        passportPhoto: url,\r\n                        passportScan: passportScan,\r\n                        medicalCertificate: medicalCertificate,\r\n                        declarationLetter: declarationLetter,\r\n                    }))?.hasError() ?? false;\r\n                    break;\r\n                case InputType.passportScan:\r\n                    hasError = (await userStore?.updateApplicantMedia({\r\n                        passportPhoto: passportPhoto,\r\n                        passportScan: url,\r\n                        medicalCertificate: medicalCertificate,\r\n                        declarationLetter: declarationLetter,\r\n                    }))?.hasError() ?? false;\r\n                    break;\r\n                case InputType.medicalCertificate:\r\n                    hasError = (await userStore?.updateApplicantMedia({\r\n                        passportPhoto: passportPhoto,\r\n                        passportScan: passportScan,\r\n                        medicalCertificate: url,\r\n                        declarationLetter: declarationLetter,\r\n                    }))?.hasError() ?? false;\r\n                    break;\r\n                case InputType.declarationLetter:\r\n                    hasError = (await userStore?.updateApplicantMedia({\r\n                        passportPhoto: passportPhoto,\r\n                        passportScan: passportScan,\r\n                        medicalCertificate: medicalCertificate,\r\n                        declarationLetter: url,\r\n                    }))?.hasError() ?? false;\r\n                    break;\r\n            }\r\n            if (hasError) {\r\n                toast.error(`Oops, we've got a problem`);\r\n            } else {\r\n                toast.success(\"Success updating Applicant Media\");\r\n            }\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return useObserver(() => {\r\n        return (<>\r\n            {\r\n                // @ts-ignore\r\n                <LoadingBackground open={loading || userStore?.loading}/>\r\n            }\r\n            <Grid item>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Applicant Media\r\n                </Typography>\r\n                <Divider/>\r\n                <form style={{width: '80%', textAlign: 'center'}}>\r\n                    <InputUploadMedia\r\n                        disabled={userStore?.configApplicationForm.isSubmitted}\r\n                        dialogTitle={\"Passport size photo\"}\r\n                        subHeader={'(4x6 cm)'}\r\n                        fileName={'passport-photo'}\r\n                        value={passportPhoto}\r\n                        showExampleButton={true}\r\n                        exampleType={ExampleTypeOptions.ASSETS_IMAGE}\r\n                        exampleData={'apply/assets/images/passport-photo-example.png'}\r\n                        onSubmitted={(message, url, error) => onSubmittedMedia(error ?? false, InputType.passportPhoto, url)}\r\n                    />\r\n                    <InputUploadMedia\r\n                        disabled={userStore?.configApplicationForm.isSubmitted}\r\n                        dialogTitle={\"Scan of passport\"}\r\n                        fileName={'passport-scan'}\r\n                        value={passportScan}\r\n                        showExampleButton={true}\r\n                        exampleType={ExampleTypeOptions.ASSETS_IMAGE}\r\n                        exampleData={'apply/assets/images/passport-scan-example.png'}\r\n                        onSubmitted={(message, url, error) => onSubmittedMedia(error ?? false, InputType.passportScan, url)}\r\n                    />\r\n                    <InputUploadMedia\r\n                        disabled={userStore?.configApplicationForm.isSubmitted}\r\n                        dialogTitle={\"Medical certificate\"}\r\n                        fileName={'medical-certificate'}\r\n                        value={medicalCertificate}\r\n                        acceptedFileType={AcceptedFileTypes.PDF}\r\n                        onSubmitted={(message, url, error) => onSubmittedMedia(error ?? false, InputType.medicalCertificate, url)}\r\n                    />\r\n                    <InputUploadMedia\r\n                        disabled={userStore?.configApplicationForm.isSubmitted}\r\n                        dialogTitle={\"Declaration letter\"}\r\n                        fileName={'declaration-letter'}\r\n                        value={declarationLetter}\r\n                        acceptedFileType={AcceptedFileTypes.PDF}\r\n                        showExampleButton={true}\r\n                        exampleType={ExampleTypeOptions.LINK}\r\n                        exampleData={'https://drive.google.com/file/d/1XY4gbHkBv-VbjLsIJ5AiwmBWOk8QXZqH/view'}\r\n                        onSubmitted={(message, url, error) => onSubmittedMedia(error ?? false, InputType.declarationLetter, url)}\r\n                    />\r\n                </form>\r\n            </Grid>\r\n        </>);\r\n    });\r\n};\r\n\r\n","import React, {useContext, useState} from \"react\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    Divider,\r\n    Grid,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport LoadingBackground from \"../LoadingBackdrop\";\r\nimport {useObserver} from 'mobx-react';\r\nimport {UserStoreContext} from \"../../providers/UserProvider\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nexport const ApplicationFormConfirm: React.FC = () => {\r\n    const userStore = useContext(UserStoreContext);\r\n    const [loading, setLoading] = useState<boolean>(userStore?.loading ?? false);\r\n\r\n    const [openDialog, setOpenDialog] = useState<boolean>(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpenDialog(true);\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    const handleOk = async () => {\r\n        handleCancel();\r\n        setLoading(true);\r\n\r\n        const configData = userStore?.configApplicationForm;\r\n\r\n        const res = await userStore?.updateConfigApplicationForm({\r\n            isSubmitted: true,\r\n            responseStatus: configData?.responseStatus,\r\n            messageFromAdmin: configData?.messageFromAdmin,\r\n            messageToAdmin: configData?.messageToAdmin,\r\n            dateMessageFromAdmin: configData?.dateMessageFromAdmin,\r\n            dateMessageToAdmin: configData?.dateMessageToAdmin,\r\n        });\r\n\r\n        if (res?.hasError()) {\r\n            toast.error(`Oops, we've got a problem`);\r\n        } else {\r\n            toast.success(\"Success updating Applicant Media\");\r\n        }\r\n\r\n        setLoading(false);\r\n    };\r\n\r\n    console.log(userStore?.configApplicationForm.isSubmitted);\r\n\r\n    return useObserver(() => {\r\n        return (<>\r\n            {\r\n                // @ts-ignore\r\n                <LoadingBackground open={loading || userStore?.loading}/>\r\n            }\r\n            <Grid item>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Confirmation\r\n                </Typography>\r\n                <Divider/>\r\n                <br/> <br/>\r\n                <Grid item style={{\r\n                    textAlign: \"center\",\r\n                    maxWidth: '65%',\r\n                    minWidth: '400px',\r\n                    margin: 'auto',\r\n                }}>\r\n                    <Card color={'red'}>\r\n                        <CardContent>\r\n                            <Typography variant={\"h6\"}>\r\n                                DISCLAIMER\r\n                            </Typography>\r\n                            <Divider/>\r\n                            <br/>\r\n                            <Typography variant={\"body1\"}>\r\n                                You can save and revise them anytime before submit it by the\r\n                                deadline.\r\n                                Please ensure that you have put and uploaded the right data and documents before\r\n                                clicking submit button.\r\n                                Once you click <strong>SUBMIT</strong>, you <strong>CANNOT</strong> change your\r\n                                data/documents.\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                    <br/>\r\n                    <br/>\r\n                    <Button\r\n                        color={\"primary\"}\r\n                        size={\"medium\"}\r\n                        variant={\"contained\"}\r\n                        onClick={handleOpen}\r\n                        disabled={userStore?.configApplicationForm.isSubmitted ?? false}\r\n                    >\r\n                        Submit Application Form\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Dialog\r\n                maxWidth=\"sm\"\r\n                aria-labelledby=\"confirmation-dialog-title\"\r\n                open={openDialog}\r\n            >\r\n                <DialogTitle id=\"confirmation-dialog-title\">Final confirmation</DialogTitle>\r\n                <Divider/>\r\n                <DialogContent>\r\n                    <Typography variant={'body2'}>\r\n                        Once you click <strong>SUBMIT</strong>, you <strong>CANNOT</strong> change your\r\n                        data/documents.\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleCancel} color=\"primary\">\r\n                        Cancel\r\n                    </Button>\r\n                    <Button onClick={handleOk} variant={'contained'} color=\"primary\">\r\n                        Submit\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>);\r\n    });\r\n};\r\n\r\n","import React, {useContext} from 'react';\r\nimport {makeStyles, Theme} from '@material-ui/core/styles';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Navigation from \"../components/Navigation\";\r\nimport {Divider, Grid, Icon, PropTypes} from \"@material-ui/core\";\r\nimport {PersonalDetails} from \"../components/application-form/PersonalDetails\";\r\nimport {useObserver} from 'mobx-react';\r\nimport {EducationBackground} from \"../components/application-form/EducationBackground\";\r\nimport {HealthCondition} from \"../components/application-form/HealthCondition\";\r\nimport {PersonalStatement} from \"../components/application-form/PersonalStatement\";\r\nimport {EmergencyContactDetail} from \"../components/application-form/EmergencyContact\";\r\nimport {UserStoreContext} from \"../providers/UserProvider\";\r\nimport {ApplicantMedia} from \"../components/application-form/ApplicantMedia\";\r\nimport {ApplicationFormConfirm} from \"../components/application-form/ApplicationFormConfirm\";\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const {children, value, index, ...other} = props;\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`vertical-tabpanel-${index}`}\r\n            aria-labelledby={`vertical-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nfunction a11yProps(index: any) {\r\n    return {\r\n        id: `vertical-tab-${index}`,\r\n        'aria-controls': `vertical-tabpanel-${index}`,\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    tabs: {\r\n        borderRight: `1px solid ${theme.palette.divider}`,\r\n    },\r\n    toolbar: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'flex-end',\r\n        padding: theme.spacing(0, 1),\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        paddingTop: theme.spacing(3),\r\n        paddingRight: theme.spacing(3),\r\n        paddingBottom: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nexport default function ApplicationForm() {\r\n    const classes = useStyles();\r\n    const userStore = useContext(UserStoreContext);\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const colorTileItem = (value?: boolean): PropTypes.Color => {\r\n        if (value) {\r\n            if (userStore?.configApplicationForm.isSubmitted) return 'primary';\r\n            return 'secondary';\r\n        }\r\n        return 'inherit';\r\n    };\r\n\r\n    return useObserver(() => (<div className={classes.root}>\r\n        <Navigation/>\r\n\r\n        <main className={classes.content}>\r\n            <div className={classes.toolbar}/>\r\n\r\n            <Grid container>\r\n                <Grid item xs={4} sm={2}>\r\n                    <Tabs\r\n                        orientation=\"vertical\"\r\n                        variant=\"scrollable\"\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        aria-label=\"Vertical tabs example\"\r\n                        className={classes.tabs}\r\n                    >\r\n                        <Tab icon={<Icon>emoji_emotions</Icon>} label=\"Information\" {...a11yProps(0)} />\r\n                        <Tab\r\n                            // disabled={userStore?.configApplicationForm.isSubmitted}\r\n                            icon={\r\n                                <Icon\r\n                                    color={colorTileItem(userStore?.personalDetailsIsValid)}>\r\n                                    {userStore?.personalDetailsIsValid ? 'emoji_emotions' : 'sentiment_satisfied'}\r\n                                </Icon>}\r\n                            label=\"Section 1\" {...a11yProps(1)}\r\n                        />\r\n                        <Tab\r\n                            // disabled={userStore?.configApplicationForm.isSubmitted}\r\n                            icon={\r\n                                <Icon\r\n                                    color={colorTileItem(userStore?.educationBackgroundIsValid)}>\r\n                                    {userStore?.educationBackgroundIsValid ? 'emoji_emotions' : 'sentiment_satisfied'}\r\n                                </Icon>}\r\n                            label=\"Section 2\" {...a11yProps(1)}\r\n                        />\r\n                        <Tab\r\n                            // disabled={userStore?.configApplicationForm.isSubmitted}\r\n                            icon={\r\n                                <Icon\r\n                                    color={colorTileItem(userStore?.healthConditionIsValid)}>\r\n                                    {userStore?.healthConditionIsValid ? 'emoji_emotions' : 'sentiment_satisfied'}\r\n                                </Icon>}\r\n                            label=\"Section 3\" {...a11yProps(1)}\r\n                        />\r\n                        <Tab\r\n                            // disabled={userStore?.configApplicationForm.isSubmitted}\r\n                            icon={\r\n                                <Icon\r\n                                    color={colorTileItem(userStore?.personalStatementIsValid)}>\r\n                                    {userStore?.personalStatementIsValid ? 'emoji_emotions' : 'sentiment_satisfied'}\r\n                                </Icon>}\r\n                            label=\"Section 4\" {...a11yProps(1)}\r\n                        />\r\n                        <Tab\r\n                            // disabled={userStore?.configApplicationForm.isSubmitted}\r\n                            icon={\r\n                                <Icon\r\n                                    color={colorTileItem(userStore?.emergencyContactIsValid)}>\r\n                                    {userStore?.emergencyContactIsValid ? 'emoji_emotions' : 'sentiment_satisfied'}\r\n                                </Icon>}\r\n                            label=\"Section 5\" {...a11yProps(1)}\r\n                        />\r\n                        <Tab\r\n                            // disabled={userStore?.configApplicationForm.isSubmitted}\r\n                            icon={\r\n                                <Icon\r\n                                    color={colorTileItem(userStore?.applicantMediaIsValid)}>\r\n                                    {userStore?.applicantMediaIsValid ? 'emoji_emotions' : 'sentiment_satisfied'}\r\n                                </Icon>}\r\n                            label=\"Section 6\" {...a11yProps(1)}\r\n                        />\r\n                        <Tab disabled={!userStore?.applicationFormIsValid} icon={\r\n                            <Icon>\r\n                                {userStore?.applicantMediaIsValid ? 'emoji_emotions' : 'sentiment_satisfied'}\r\n                            </Icon>}\r\n                             label=\"Confirmation\" {...a11yProps(1)}\r\n                        />\r\n                    </Tabs>\r\n                </Grid>\r\n                <Grid item xs={8} sm={10}>\r\n                    <TabPanel value={value} index={0}>\r\n                        <Grid item>\r\n                            <Typography variant=\"h3\" gutterBottom>\r\n                                Application Form\r\n                            </Typography>\r\n                            <Divider/>\r\n                            <Typography variant=\"body1\" gutterBottom>\r\n                                Before starting your application, please prepare the following documents:\r\n                            </Typography>\r\n                            <ul>\r\n                                <li>Short essay about your motivation in applying to UM iCamp 2020, what knowledge\r\n                                    you\r\n                                    seek to gain,\r\n                                    and how UM iCamp program will benefit from your attendance. (max. 500 words)\r\n                                </li>\r\n                                <li>Short essay about your activities or experiences in your community. (max. 500\r\n                                    words)\r\n                                </li>\r\n                                <li>Short argument on things that make you the most suitable candidate for the\r\n                                    program.\r\n                                </li>\r\n                                <li>A Formal Photo in Colour (passport size photo 4 cm x 6 cm) to upload. (File\r\n                                    *.JPG\r\n                                    max. 1 MB)\r\n                                </li>\r\n                                <li>Scan of passport to upload. (File *.JPG max. 1 MB)</li>\r\n                                <li>Medical certificate to upload. (File .PDF max. 1 MB)</li>\r\n                                <li>Declaration letter to upload. (File .PDF max 1 MB) Please fill out the form in\r\n                                    this\r\n                                    link&nbsp;\r\n                                    <a href={'http://bit.ly/declarationletter'} target={'_blank'}\r\n                                       rel=\"noopener noreferrer\">http://bit.ly/declarationletter</a>, sign, and upload\r\n                                    it in a PDF file format.\r\n                                </li>\r\n                            </ul>\r\n                        </Grid>\r\n                    </TabPanel>\r\n                    <TabPanel value={value} index={1}>\r\n                        <PersonalDetails/>\r\n                    </TabPanel>\r\n                    <TabPanel value={value} index={2}>\r\n                        <EducationBackground/>\r\n                    </TabPanel>\r\n                    <TabPanel value={value} index={3}>\r\n                        <HealthCondition/>\r\n                    </TabPanel>\r\n                    <TabPanel value={value} index={4}>\r\n                        <PersonalStatement/>\r\n                    </TabPanel>\r\n                    <TabPanel value={value} index={5}>\r\n                        <EmergencyContactDetail/>\r\n                    </TabPanel>\r\n                    <TabPanel value={value} index={6}>\r\n                        <ApplicantMedia/>\r\n                    </TabPanel>\r\n                    <TabPanel value={value} index={7}>\r\n                        <ApplicationFormConfirm/>\r\n                    </TabPanel>\r\n                </Grid>\r\n            </Grid>\r\n        </main>\r\n    </div>));\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],"sourceRoot":""}